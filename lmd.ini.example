# Listen for incoming livestatus requests here
# TCP or unix sockets are allowed. Multiple entries are also valid.
# An http address can be defined as well.
Listen          = ["127.0.0.1:3333", "/tmp/lmd.sock", "http://*:8080", "https://*:8443", "tls://127.0.0.1:3334"]

# List of cluster nodes (cluster mode).
# All cluster nodes must have their http server enabled (see Listen).
# A bare ip address may be provided if the port is the same on all nodes.
#Nodes           = ["10.0.0.1", "http://10.0.0.2:8080"]

# Timeout for incoming client requests on `Listen` threads
ListenTimeout = 60

# TLS certificate settings for https and tls listeners
#TLSKey         = "server.key"
#TLSCertificate = "server.pem"
# set CA file to enforce client certificates
#TLSClientPems  = ["client.pem"]

# daemon will log to stdout if no logfile is set
#LogFile         = "lmd.log"

# May be Error, Warn, Info, Debug and Trace
LogLevel        = "Info"

# After this amount of seconds, a backend will be marked down when there
# is no response
StaleBackendTimeout = 30

# Refresh remote sites every x seconds.
# Fast updates are ok, only changed hosts and services get fetched
# and once every `FullUpdateInterval` everything gets updated.
UpdateInterval = 5

# Run a full update on all objects every x seconds. Set to zero to turn off
# completly. This is usually not required and only needed if for uncommon
# reasons some updates slip through the normal delta updates.
FullUpdateInterval = 600

# After `IdleTimeout` seconds of no activity (incoming querys for this backend)
# the slower update interval of `IdleInterval` seconds will be used.
# Don't set the timeout to low, clients will have to wait for a "spin up"
# query on the first access after idling.
IdleTimeout = 120
IdleInterval = 1800

# Connection timeout settings for remote connections.
# `ConnectTimeout` will be used when opening and testing
# the initial connection and `NetTimeout` is used for transfering data.
ConnectTimeout = 30
NetTimeout = 120

# Skip ssl certificate verification on https remote backends.
# Set to 1 to disabled any ssl verification checks.
SkipSSLCheck = 0

# Use keepalive for backend peer connections.
BackendKeepAlive = true

# Uncomment to export runtime statistics in prometheus format
#ListenPrometheus = "127.0.0.1:8080"

# Naemon automatically regards a contact for a host also as a contact for all
# services of that host. We call this method loose. By setting it to strict, one
# must be an explicity contact of a service in order to see it when using the
# AuthUser setting. Please note that Naemon makes all services that do not have
# any contact at all inherit all contacts of the host - regardless whether this
# option is set to strict or loose. The default option is loose.
ServiceAuthorization = "loose"

# If GroupAuthorization is strict (default), a user must be a contact on all
# hosts in the hostgroup in able to see the hostgroup. If GroupAuthorization is
# loose it is sufficient for the user to be a contact on one of the hosts in the
# hostgroup.
GroupAuthorization = "strict"

# use tcp connections
[[Connections]]
name   = "Monitoring Site A"
id     = "id1"
source = ["192.168.33.10:6557"]

# use tcp connections with multiple sources for clusters
[[Connections]]
name   = "Monitoring Site A"
id     = "id1"
source = ["192.168.33.10:6557", "192.168.33.20:6557"]

# or local unix sockets as remote sites
[[Connections]]
name   = "Local Site"
id     = "id2"
source = ["/var/tmp/nagios/run/live.sock"]

# use tcp connections with ipv6 address
[[Connections]]
name   = "Monitoring Site A IPv6"
id     = "id3"
source = ["[::1]:6557"]

# connect to thruk http(s) api
[[Connections]]
name   = "Thruk HTTP"
id     = "id4"
source = ["http://thruk.monitoring/omdsite/"]
auth   = "authkey..."

# use tcp connections with tls encryption
[[Connections]]
name           = "Monitoring Site A TLS"
id             = "id5"
tlsCertificate = "client.pem"          # if key and cert is set, client cert authentication will be done
tlsKey         = "client.key"
tlsCA          = "optional_server.crt" # used to verify server certificate
tlsSkipVerify  = 0                     # if set to 1, no common name verification will be done
source         = ["tls://192.168.33.10:6557"]

# add more connections as you like...
